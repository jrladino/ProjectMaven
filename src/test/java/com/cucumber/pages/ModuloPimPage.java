package com.cucumber.pages;

import org.openqa.selenium.By;
import org.openqa.selenium.WebDriver;
import org.openqa.selenium.WebElement;
import org.openqa.selenium.TimeoutException;
import org.openqa.selenium.support.ui.ExpectedConditions;
import org.openqa.selenium.support.ui.WebDriverWait;

import com.cucumber.utils.ExcelUtil;
import com.cucumber.utils.WaitUtil;

import java.time.Duration;
import java.util.Map;
import java.util.NoSuchElementException;

import org.junit.Assert;

public class ModuloPimPage {

  private WebDriver driver;
  private WebDriverWait wait;

  public ModuloPimPage(WebDriver driver) {
    this.driver = driver;
    this.wait = new WebDriverWait(driver, Duration.ofSeconds(30));
  }

  public void validaPantallaPrincipal() {
    // Esperar a que aparezca el encabezado del Dashboard o Employee Information
    By headerPIM = By.xpath("//h6[normalize-space()='Employee Information' or normalize-space()='Dashboard']");
    WebElement elementoHeader = wait.until(ExpectedConditions.visibilityOfElementLocated(headerPIM));

    // Validar que efectivamente se visualiza
    Assert.assertTrue("‚ùå No se visualiz√≥ la p√°gina principal.", elementoHeader.isDisplayed());
    System.out.println("‚úÖ Validaci√≥n exitosa: el usuario se encuentra la pantalla principal.");
  }

  public void irAModuloPIM() {
    try {
      // 1Ô∏è‚É£ Hacer clic en el men√∫ PIM
      By menuPIM = By.xpath("//span[normalize-space()='PIM']/ancestor::a");
      WebElement moduloPIM = wait.until(ExpectedConditions.elementToBeClickable(menuPIM));
      moduloPIM.click();
      System.out.println("Ingreso correcto al m√≥dulo PIM.");

      // 2Ô∏è‚É£ Esperar que aparezca un encabezado caracter√≠stico del m√≥dulo
      By tituloPIM = By.xpath("//h6[normalize-space()='PIM']");
      WebElement header = wait.until(ExpectedConditions.visibilityOfElementLocated(tituloPIM));

      // 3Ô∏è‚É£ Assert para confirmar que la p√°gina carg√≥ correctamente
      Assert.assertTrue("‚ùå No se lleg√≥ a la p√°gina del m√≥dulo PIM.", header.isDisplayed());
      System.out.println("‚úÖ Confirmado: El usuario est√° en la p√°gina del m√≥dulo PIM.");

    } catch (TimeoutException e) {
      System.out.println("Error al ingresar al m√≥dulo PIM: " + e.getMessage());
      Assert.fail("‚ùå No se pudo ingresar al m√≥dulo PIM dentro del tiempo esperado.");
    }
  }

  public void usuario_hace_clic_en_el_boton_Agregar() {
    try {
      // 1Ô∏è‚É£ Esperar y hacer clic en el bot√≥n "Add"
      By botonAgregar = By.xpath("//button[normalize-space()='Add']");
      WebElement agregarButton = wait.until(ExpectedConditions.elementToBeClickable(botonAgregar));
      agregarButton.click();
      System.out.println("Clic en el bot√≥n 'Agregar' exitoso.");

      // 2Ô∏è‚É£ Validar que se haya abierto la p√°gina "Add Employee"
      By tituloAddEmployee = By.xpath("//h6[normalize-space()='Add Employee']");
      WebElement headerAddEmployee = wait.until(ExpectedConditions.visibilityOfElementLocated(tituloAddEmployee));

      // 3Ô∏è‚É£ Assert para confirmar la navegaci√≥n
      Assert.assertTrue("‚ùå No se abri√≥ la p√°gina 'Add Employee' despu√©s de hacer clic en Agregar.",
          headerAddEmployee.isDisplayed());

      System.out.println("‚úÖ Confirmado: Se abri√≥ correctamente la p√°gina 'Add Employee'.");

    } catch (TimeoutException e) {
      System.out.println("‚ùå Error al hacer clic en el bot√≥n Agregar o al cargar la p√°gina: " + e.getMessage());
      Assert.fail("No se pudo abrir la p√°gina 'Add Employee' dentro del tiempo esperado.");
    }
  }

  public void el_usuario_crea_un_nuevo_empleado_con_datos_validos() throws InterruptedException {
    Map<String, String> datosEmpleado = ExcelUtil
        .obtenerRegistroDisponibleYMarcarUsado("src/test/resources/datos.xlsx");

    System.out.println("‚úÖ Iniciando creaci√≥n de nuevo empleado...");

    try {
      // 1Ô∏è‚É£ Ingresar nombres
      By inputFirstName = By.name("firstName");
      WebElement firstName = wait.until(ExpectedConditions.visibilityOfElementLocated(inputFirstName));
      firstName.sendKeys(datosEmpleado.get("Primer Nombre"));

      By inputMiddleName = By.name("middleName");
      wait.until(ExpectedConditions.visibilityOfElementLocated(inputMiddleName))
          .sendKeys(datosEmpleado.get("Segundo Nombre"));

      By inputLastName = By.name("lastName");
      wait.until(ExpectedConditions.visibilityOfElementLocated(inputLastName))
          .sendKeys(datosEmpleado.get("Apellido"));
      System.out.println("üßæ Datos personales ingresados correctamente.");

      // 2Ô∏è‚É£ Generar y asignar Employee ID √∫nico
      By employeeId = By.xpath("//label[normalize-space()='Employee Id']/following::input[1]");
      WebElement campoEmployeeId = wait.until(ExpectedConditions.visibilityOfElementLocated(employeeId));
      campoEmployeeId.clear();
      String idUnico = String.valueOf((int) (Math.random() * 1000000));
      campoEmployeeId.sendKeys(idUnico);
      System.out.println("üÜî Nuevo Employee ID generado: " + idUnico);

      // 3Ô∏è‚É£ Guardar primera parte del formulario
      By botonGuardar = By.xpath("//button[normalize-space()='Save']");
      WebElement saveButton = wait.until(ExpectedConditions.elementToBeClickable(botonGuardar));
      Thread.sleep(3000); // Peque√±a espera para asegurar que todo est√© listo
      saveButton.click();
      System.out.println("üíæ Primer guardado exitoso del empleado.");

      // 4Ô∏è‚É£ Validar que carg√≥ la segunda secci√≥n del formulario
      By otherId = By.xpath("//label[normalize-space()='Other Id']/following::input[1]");
      WebElement campoOtherId = wait.until(ExpectedConditions.visibilityOfElementLocated(otherId));
      Assert.assertTrue("‚ùå No se carg√≥ la segunda secci√≥n del formulario PIM.", campoOtherId.isDisplayed());
      System.out.println("‚úÖ Secci√≥n de detalles adicionales cargada correctamente.");

      // 5Ô∏è‚É£ Completar datos personales
      campoOtherId.sendKeys(datosEmpleado.get("Cedula"));

      By licenseNumber = By.xpath("//label[normalize-space()=\"Driver's License Number\"]/following::input[1]");
      wait.until(ExpectedConditions.visibilityOfElementLocated(licenseNumber))
          .sendKeys(datosEmpleado.get("Licencia de conduccion"));

      By fechaLicencia = By.xpath("//label[normalize-space()='License Expiry Date']/following::input[1]");
      wait.until(ExpectedConditions.visibilityOfElementLocated(fechaLicencia))
          .sendKeys(datosEmpleado.get("Fecha expiracion Licencia"));
      System.out.println("üìú Campos de identificaci√≥n completados.");

      // 6Ô∏è‚É£ Nacionalidad
      By nacionalidadField = By
          .xpath("//label[text()='Nationality']/following::div[contains(@class,'oxd-select-text')][1]");

      // üî∏ Esperar a que el loader desaparezca antes de interactuar
      WaitUtil.esperarLoader(driver, wait);
      // üî∏ Interactuar con el campo Nacionalidad
      wait.until(ExpectedConditions.elementToBeClickable(nacionalidadField)).click();

      String nacionalidad = datosEmpleado.get("Nacionalidad");
      By seleccionarNacionalidad = By
          .xpath("//div[contains(@class,'oxd-select-option') and normalize-space()='" + nacionalidad + "']");

      wait.until(ExpectedConditions.elementToBeClickable(seleccionarNacionalidad)).click();
      System.out.println("üåç Nacionalidad seleccionada: " + nacionalidad);

      // 7Ô∏è‚É£ Estado civil
      By estadoCivilField = By
          .xpath("//label[text()='Marital Status']/following::div[contains(@class,'oxd-select-text')][1]");
      wait.until(ExpectedConditions.elementToBeClickable(estadoCivilField)).click();

      String estadoCivil = datosEmpleado.get("Estado Civil");
      By seleccionarEstadoCivil = By
          .xpath("//div[contains(@class,'oxd-select-option') and normalize-space()='" + estadoCivil + "']");
      wait.until(ExpectedConditions.elementToBeClickable(seleccionarEstadoCivil)).click();
      System.out.println("‚ù§Ô∏è Estado civil seleccionado: " + estadoCivil);

      // 8Ô∏è‚É£ Fecha de nacimiento
      By fechaNacimiento = By.xpath("//label[text()='Date of Birth']/following::input[1]");
      WebElement campoFechaNacimiento = wait.until(ExpectedConditions.visibilityOfElementLocated(fechaNacimiento));
      campoFechaNacimiento.sendKeys(datosEmpleado.get("Fecha de Nacimiento"));
      System.out.println("üéÇ Fecha de nacimiento ingresada: " + datosEmpleado.get("Fecha de Nacimiento"));

      // 9Ô∏è‚É£ G√©nero
      String genero = datosEmpleado.get("Genero").equalsIgnoreCase("Hombre") ? "1" : "2";
      By selectorGenero = By.xpath("(//span[contains(@class,'oxd-radio-input')])[" + genero + "]");
      wait.until(ExpectedConditions.elementToBeClickable(selectorGenero)).click();
      System.out.println("üöª G√©nero seleccionado: " + datosEmpleado.get("Genero"));

      // üîü Confirmar que todo qued√≥ visible antes de terminar
      Assert.assertTrue("‚ùå El campo 'Date of Birth' no es visible, posible error en el formulario.",
          campoFechaNacimiento.isDisplayed());
      System.out.println("‚úÖ Validaci√≥n final: el formulario se complet√≥ correctamente.");

    } catch (TimeoutException e) {
      Assert.fail("‚è∞ Error: elemento no encontrado dentro del tiempo esperado. " + e.getMessage());
    } catch (NoSuchElementException e) {
      Assert.fail("‚ùå Error: elemento no encontrado en el DOM. " + e.getMessage());
    } catch (Exception e) {
      Assert.fail("üí• Error inesperado durante la creaci√≥n del empleado: " + e.getMessage());
    }
  }

  public void el_usuario_guarda_el_formulario_con_los_datos() throws InterruptedException {
    try {
      System.out.println("üíæ Intentando guardar el formulario del empleado...");

      // 1Ô∏è‚É£ Esperar que el bot√≥n Save est√© disponible y hacer clic
      By botonGuardar = By.xpath("(//button[normalize-space()='Save'])[1]");
      WebElement saveButton = wait.until(ExpectedConditions.elementToBeClickable(botonGuardar));
      Thread.sleep(3000); // Peque√±a espera para asegurar que todo est√© listo
      saveButton.click();
      System.out.println("üñ±Ô∏è Clic en el bot√≥n 'Save' ejecutado.");

      // 2Ô∏è‚É£ Marcar el registro en el Excel como usado
      ExcelUtil.marcarRegistroComoUsado("src/test/resources/datos.xlsx");
      System.out.println("üìä Registro marcado como utilizado en el Excel.");

      // 3Ô∏è‚É£ Validar que la p√°gina sigue activa y no arroj√≥ errores
      String currentUrl = driver.getCurrentUrl();
      Assert.assertTrue("‚ùå La URL no es la esperada despu√©s del guardado. URL actual: " + currentUrl,
          currentUrl.contains("/pim") || currentUrl.contains("viewEmployee"));
      System.out.println("‚úÖ Confirmaci√≥n final: el formulario fue guardado y la navegaci√≥n contin√∫a en el m√≥dulo PIM.");

    } catch (TimeoutException e) {
      System.out.println("‚è∞ Error: el bot√≥n 'Save' o el mensaje de √©xito no aparecieron a tiempo. " + e.getMessage());
      Assert.fail("No se detect√≥ la confirmaci√≥n del guardado dentro del tiempo esperado.");
    } catch (NoSuchElementException e) {
      System.out.println("‚ùå Error: elemento esperado no encontrado. " + e.getMessage());
      Assert.fail("No se encontr√≥ un elemento clave durante el proceso de guardado.");
    } catch (Exception e) {
      System.out.println("üí• Error inesperado durante el guardado del formulario: " + e.getMessage());
      Assert.fail("Fallo inesperado al guardar el formulario.");
    }
  }
}
